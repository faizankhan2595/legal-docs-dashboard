{"version":3,"sources":["views/admin-views/document-single/RequestPayment.js","views/admin-views/document-single/index.js"],"names":["Title","Typography","Text","TextArea","Input","RequestPayment","props","useState","loading","style","top","width","title","visible","onOk","setOrderStatus","onCancel","setVisible","confirmLoading","level","min","max","defaultValue","formatter","value","replace","parser","className","type","rows","msgReducer","state","action","messages","push","message","DocumentSingle","useReducer","dispatch","details","setDetails","status","setStatus","statusLevel","setStatusLevel","formURLs","setFormURLs","fileListForm","setFileListForm","docURLs","setDocURLs","fileListDocs","setFileListDocs","adminDocs","setAdminDocs","fileListAdminDocs","setFileListAdminDocs","formRef","React","createRef","inputEl","useRef","useEffect","getOrder","match","params","id","url","API_BASE_URL","data","axios","post","then","response","form_urls","doc_urls","legalized_urls","TempFileListForm","map","el","url2","SERVER_URL","name","split","TempFileListDocs","TempFileListAdminDocs","msg_list","catch","error","uploadPropsForm","onChange","info","file","success","fileList","TempFormURLs","forEach","showUploadList","showRemoveIcon","uploadPropsDocs","TempDocURLs","AdminDocsProps","fileList2","TempAdminDocs","current","click","onRemove","setTimeout","getMsgType","obj","msgType","text","src","alt","Flex","alignItems","FileOutlined","onSend","values","newMsg","newMsgData","avatar","from","localStorage","getItem","time","setFieldsValue","msgList","new_status","gutter","xs","sm","md","lg","extra","onClick","ref","val","marginTop","Item","color","UploadOutlined","cursor","readOnly","elm","i","onFinish","autoComplete","placeholder","suffix","shape","size","htmlType","SendOutlined"],"mappings":"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","file":"static/js/15.e0460958.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport { Modal, Typography, Input, InputNumber } from 'antd';\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nconst RequestPayment = (props) => {\r\n    const [loading] = useState(false)\r\n\r\n    const onCancel = () => {\r\n      props.setVisible(false);\r\n    }\r\n    \r\n    const onOk = () => {\r\n      props.setOrderStatus('Payment Request Generated');\r\n    }\r\n\r\n    return (\r\n\t\t<>\r\n        <Modal\r\n          style={{ top: 20 }}\r\n          width={620}\r\n          title=\"Payment Request\"\r\n          visible={props.visible}\r\n          onOk={onOk}\r\n          onCancel={onCancel}\r\n          confirmLoading={loading}\r\n        >\r\n          <Title level={4} >Payment Amount</Title>\r\n          <InputNumber\r\n            style={{width: '100%'}}\r\n            min={0} max={10000000}\r\n            defaultValue={1000}\r\n            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r\n            parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\r\n          />\r\n\r\n          <div className={'mt-4 mb-3'}>\r\n            <Text type=\"secondary\">Please provide other details (if any) that you want client to know.</Text>\r\n          </div>\r\n          <TextArea rows={4}  />\r\n\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RequestPayment","import React, { useEffect, useState, useRef, useReducer } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Button,\r\n  Timeline,\r\n  Typography,\r\n  Upload,\r\n  Avatar,\r\n  Divider,\r\n  Input,\r\n  Form,\r\n  message,\r\n} from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { FileOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport Flex from \"components/shared-components/Flex\";\r\nimport { API_BASE_URL, SERVER_URL } from \"../../../constants/ApiConstant\";\r\nimport axios from \"axios\";\r\nimport RequestPayment from \"./RequestPayment\";\r\n// import { io } from \"socket.io-client\";\r\nconst { Title, Text } = Typography;\r\nconst { TextArea } = Input;\r\n\r\nfunction msgReducer(state, action) {\r\n  if (action.type === \"NEW_MESSAGE\") {\r\n    state.messages.push(action.message);\r\n    return { ...state };\r\n  }\r\n  if (action.type === \"ALL_MESSAGES\") {\r\n    const messages = [...action.messages];\r\n    state.messages = messages;\r\n    return { ...state };\r\n  }\r\n  return state;\r\n}\r\n\r\nconst DocumentSingle = (props) => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  //   const [msgList, setMsgList] = useState([]);\r\n\r\n  const [state, dispatch] = useReducer(msgReducer, { messages: [] });\r\n\r\n  const [details, setDetails] = useState(\"\");\r\n  const [status, setStatus] = useState(\"Order Created\");\r\n  const [statusLevel, setStatusLevel] = useState(0);\r\n\r\n  const [formURLs, setFormURLs] = useState([]);\r\n  const [fileListForm, setFileListForm] = useState([]);\r\n\r\n  const [docURLs, setDocURLs] = useState([]);\r\n  const [fileListDocs, setFileListDocs] = useState([]);\r\n\r\n  const [adminDocs, setAdminDocs] = useState([]);\r\n  const [fileListAdminDocs, setFileListAdminDocs] = useState([]);\r\n\r\n  let formRef = React.createRef();\r\n  const inputEl = useRef(null);\r\n\r\n  useEffect(() => {\r\n    getOrder(props.match.params.id);\r\n  }, [props.match.params.id]);\r\n\r\n  const getOrder = (id) => {\r\n    var url = API_BASE_URL + \"get-order\";\r\n\r\n    var data = {\r\n      id: id,\r\n    };\r\n\r\n    axios\r\n      .post(url, data, {})\r\n      .then((response) => {\r\n        const form_urls = response.data.form_urls;\r\n        const doc_urls = response.data.doc_urls;\r\n        const legalized_urls = response.data.legalized_urls;\r\n\r\n        setFormURLs(form_urls);\r\n        setDocURLs(doc_urls);\r\n        setAdminDocs(legalized_urls);\r\n        setStatus(response.data.status);\r\n\r\n        if (response.data.status === \"Document Submitted\") setStatusLevel(0);\r\n        if (response.data.status === \"Document Received\") setStatusLevel(1);\r\n        if (response.data.status === \"Payment Request Generated\")\r\n          setStatusLevel(2);\r\n        if (response.data.status === \"Payment Completed\") setStatusLevel(3);\r\n        if (response.data.status === \"Sent For Attestation\") setStatusLevel(4);\r\n        if (response.data.status === \"Attested Documents Uploaded\")\r\n          setStatusLevel(5);\r\n        if (response.data.status === \"Documents Downloaded\") setStatusLevel(6);\r\n        if (response.data.status === \"Order Closed\") setStatusLevel(7);\r\n\r\n        let TempFileListForm = form_urls.map((el) => {\r\n          const url2 = SERVER_URL + el;\r\n          return {\r\n            name: el.split(\"uploads/client-docs/\")[1],\r\n            status: \"done\",\r\n            url: url2,\r\n          };\r\n        });\r\n\r\n        let TempFileListDocs = doc_urls.map((el) => {\r\n          const url2 = SERVER_URL + el;\r\n          return {\r\n            name: el.split(\"uploads/client-docs/\")[1],\r\n            status: \"done\",\r\n            url: url2,\r\n          };\r\n        });\r\n\r\n        let TempFileListAdminDocs = legalized_urls.map((el) => {\r\n          const url2 = SERVER_URL + el;\r\n          return {\r\n            name: el.split(\"uploads/client-docs/\")[1],\r\n            status: \"done\",\r\n            url: url2,\r\n          };\r\n        });\r\n\r\n        setFileListForm(TempFileListForm);\r\n        setFileListDocs(TempFileListDocs);\r\n        setFileListAdminDocs(TempFileListAdminDocs);\r\n        setDetails(response.data.details);\r\n        dispatch({\r\n          type: \"ALL_MESSAGES\",\r\n          messages: response.data.msg_list ? response.data.msg_list : [],\r\n        });\r\n      })\r\n      .catch(() => {\r\n        message.error(\"Something is wrong!\");\r\n      });\r\n  };\r\n\r\n  const showModal = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const changeVisible = (val) => {\r\n    setVisible(val);\r\n  };\r\n\r\n  const uploadPropsForm = {\r\n    name: \"file\",\r\n    action: API_BASE_URL + \"upload-order-docs-clients\",\r\n    onChange(info) {\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded successfully`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n      let fileList = [...info.fileList];\r\n      let TempFormURLs = [];\r\n      fileList.forEach((el) => {\r\n        if (el.status === \"done\") {\r\n          if (el.url) {\r\n            TempFormURLs.push(el.url.split(SERVER_URL)[1]);\r\n          } else {\r\n            TempFormURLs.push(el.response.url);\r\n          }\r\n        }\r\n      });\r\n      setFormURLs(TempFormURLs);\r\n      setFileListForm(fileList);\r\n    },\r\n    showUploadList: {\r\n      showRemoveIcon: false,\r\n    },\r\n  };\r\n\r\n  const uploadPropsDocs = {\r\n    name: \"file\",\r\n    action: `${API_BASE_URL}upload-order-docs-clients`,\r\n    onChange(info) {\r\n      if (info.file.status === \"done\") {\r\n        message.success(`${info.file.name} file uploaded successfully`);\r\n      } else if (info.file.status === \"error\") {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n      let fileList = [...info.fileList];\r\n      let TempDocURLs = [];\r\n      fileList.forEach((el) => {\r\n        if (el.status === \"done\") {\r\n          if (el.url) {\r\n            TempDocURLs.push(el.url.split(SERVER_URL)[1]);\r\n          } else {\r\n            TempDocURLs.push(el.response.url);\r\n          }\r\n        }\r\n      });\r\n      setDocURLs(TempDocURLs);\r\n      setFileListDocs(fileList);\r\n    },\r\n    showUploadList: {\r\n      showRemoveIcon: false,\r\n    },\r\n  };\r\n\r\n  const AdminDocsProps = {\r\n    name: \"file\",\r\n    action: `${API_BASE_URL}upload-order-docs-clients`,\r\n    onChange({ file, fileList }) {\r\n      if (file.status === \"done\") {\r\n        message.success(`${file.name} file uploaded successfully`);\r\n      } else if (file.status === \"error\") {\r\n        message.error(`${file.name} file upload failed.`);\r\n      }\r\n      let fileList2 = [...fileList];\r\n      let TempAdminDocs = [];\r\n      fileList2.forEach((el) => {\r\n        if (el.status === \"done\") {\r\n          if (el.url) {\r\n            TempAdminDocs.push(el.url.split(SERVER_URL)[1]);\r\n          } else {\r\n            TempAdminDocs.push(el.response.url);\r\n          }\r\n        }\r\n      });\r\n      setAdminDocs([...TempAdminDocs]);\r\n      setFileListAdminDocs(fileList);\r\n      if (file.status === \"done\") {\r\n        inputEl.current.click();\r\n      }\r\n    },\r\n    onRemove() {\r\n      setTimeout(() => {\r\n        inputEl.current.click();\r\n      }, 500);\r\n    },\r\n  };\r\n\r\n  const submitDocs = () => {\r\n    var url = API_BASE_URL + \"save-order\";\r\n\r\n    var data = {\r\n      id: props.match.params.id,\r\n      form_urls: formURLs,\r\n      doc_urls: docURLs,\r\n      legalized_urls: adminDocs,\r\n      details: details,\r\n    };\r\n\r\n    axios.post(url, data, {}).then((response) => {\r\n      message.success(\"Order updated successfully!\");\r\n      getOrder(props.match.params.id);\r\n    });\r\n  };\r\n\r\n  const getMsgType = (obj) => {\r\n    switch (obj.msgType) {\r\n      case \"text\":\r\n        return <span>{obj.text}</span>;\r\n      case \"image\":\r\n        return <img src={obj.text} alt={obj.text} />;\r\n      case \"file\":\r\n        return (\r\n          <Flex alignItems=\"center\" className=\"msg-file\">\r\n            <FileOutlined className=\"font-size-md\" />\r\n            <span className=\"ml-2 font-weight-semibold text-link pointer\">\r\n              <u>{obj.text}</u>\r\n            </span>\r\n          </Flex>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {};\r\n\r\n  const onSend = (values) => {\r\n    if (values.newMsg) {\r\n      const newMsgData = {\r\n        avatar: \"\",\r\n        from: localStorage.getItem(\"id\"),\r\n        msgType: \"text\",\r\n        text: values.newMsg,\r\n        time: \"\",\r\n      };\r\n\r\n      formRef.current.setFieldsValue({\r\n        newMsg: \"\",\r\n      });\r\n\r\n      dispatch({ type: \"NEW_MESSAGE\", message: newMsgData });\r\n\r\n      scrollToBottom();\r\n      var url = API_BASE_URL + \"send-message-order\";\r\n\r\n      var data = {\r\n        id: props.match.params.id,\r\n        msgList: [...state.messages, newMsgData],\r\n      };\r\n\r\n      axios\r\n        .post(url, data, {})\r\n        .then((response) => {})\r\n        .catch(() => {\r\n          message.error(\"Something is wrong!\");\r\n        });\r\n    }\r\n  };\r\n\r\n  const chatContentBody = (props, id) => (\r\n    <div className=\"chat-content-body\">\r\n      <Scrollbars>\r\n        {state.messages &&\r\n          state.messages.map((elm, i) => (\r\n            <div\r\n              key={`msg-${id}-${i}`}\r\n              className={`msg ${elm.msgType === \"date\" ? \"datetime\" : \"\"} ${\r\n                elm.from !== localStorage.getItem(\"id\")\r\n                  ? \"msg-recipient\"\r\n                  : elm.from === localStorage.getItem(\"id\")\r\n                  ? \"msg-sent\"\r\n                  : \"\"\r\n              }`}\r\n            >\r\n              {elm.avatar ? (\r\n                <div className=\"mr-2\">\r\n                  <Avatar src={elm.avatar} />\r\n                </div>\r\n              ) : null}\r\n              {elm.text ? (\r\n                <div className={`bubble ${!elm.avatar ? \"\" : \"\"}`}>\r\n                  <div className=\"bubble-wrapper\">{getMsgType(elm)}</div>\r\n                </div>\r\n              ) : null}\r\n              {elm.msgType === \"date\" ? <Divider>{elm.time}</Divider> : null}\r\n            </div>\r\n          ))}\r\n      </Scrollbars>\r\n    </div>\r\n  );\r\n\r\n  const chatContentFooter = () => (\r\n    <div className=\"chat-content-footer\">\r\n      <Form name=\"msgInput\" ref={formRef} onFinish={onSend} className=\"w-100\">\r\n        <Form.Item name=\"newMsg\" className=\"mb-0\">\r\n          <Input\r\n            autoComplete=\"off\"\r\n            placeholder=\"Type a message...\"\r\n            suffix={\r\n              <div className=\"d-flex align-items-center\">\r\n                <Button\r\n                  shape=\"circle\"\r\n                  type=\"primary\"\r\n                  size=\"small\"\r\n                  onClick={onSend}\r\n                  htmlType=\"submit\"\r\n                >\r\n                  <SendOutlined />\r\n                </Button>\r\n              </div>\r\n            }\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n\r\n  const setOrderStatus = (new_status) => {\r\n    var url = API_BASE_URL + \"update-order-status\";\r\n\r\n    var data = {\r\n      id: props.match.params.id,\r\n      status: new_status,\r\n    };\r\n\r\n    axios.post(url, data, {}).then((response) => {\r\n      message.success(\"Order updated successfully!\");\r\n      setVisible(false);\r\n      getOrder(props.match.params.id);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row gutter={16}>\r\n        <Col xs={24} sm={24} md={24} lg={16}>\r\n          <Card\r\n            title=\"Order#2\"\r\n            extra={\r\n              <>\r\n                {status === \"Document Submitted\" && (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => setOrderStatus(\"Document Received\")}\r\n                  >\r\n                    Mark Document Received\r\n                  </Button>\r\n                )}\r\n\r\n                {status === \"Document Received\" && (\r\n                  <Button type=\"primary\" onClick={showModal}>\r\n                    Request Payment\r\n                  </Button>\r\n                )}\r\n\r\n                {/* {status === \"Payment Request Generated\" && (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => setOrderStatus(\"Payment Completed\")}\r\n                  >\r\n                    Mark as Payment Completed\r\n                  </Button>\r\n                )} */}\r\n\r\n                {status === \"Payment Completed\" && (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => setOrderStatus(\"Sent For Attestation\")}\r\n                  >\r\n                    Mark as Sent For Attestation\r\n                  </Button>\r\n                )}\r\n\r\n                {status === \"Sent For Attestation\" && (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() =>\r\n                      setOrderStatus(\"Attested Documents Uploaded\")\r\n                    }\r\n                  >\r\n                    Mark as Attested Documents Uploaded\r\n                  </Button>\r\n                )}\r\n\r\n                {status === \"Attested Documents Uploaded\" && (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => setOrderStatus(\"Documents Downloaded\")}\r\n                  >\r\n                    Mark as Documents Downloaded\r\n                  </Button>\r\n                )}\r\n\r\n                {status === \"Documents Downloaded\" && (\r\n                  <Button\r\n                    type=\"primary\"\r\n                    onClick={() => setOrderStatus(\"Order Closed\")}\r\n                  >\r\n                    Close Order\r\n                  </Button>\r\n                )}\r\n\r\n                <Button className={\"d-none\"} ref={inputEl} onClick={submitDocs}>\r\n                  Save Order\r\n                </Button>\r\n              </>\r\n            }\r\n          >\r\n            <RequestPayment\r\n              visible={visible}\r\n              setVisible={changeVisible}\r\n              setOrderStatus={setOrderStatus}\r\n            />\r\n            <Divider style={{ marginTop: 0 }} />\r\n            <Row gutter={16} className={\"mt-4\"}>\r\n              <Col xs={24} sm={24} md={24} lg={8}>\r\n                <Title level={4} className={\"mb-4\"}>\r\n                  Order Progress\r\n                </Title>\r\n                <Timeline>\r\n                  <Timeline.Item color={\"green\"}>\r\n                    Document Submitted\r\n                  </Timeline.Item>\r\n                  <Timeline.Item color={statusLevel >= 1 ? \"green\" : \"gray\"}>\r\n                    Document Received\r\n                  </Timeline.Item>\r\n                  <Timeline.Item color={statusLevel >= 2 ? \"green\" : \"gray\"}>\r\n                    Payment Request Generated\r\n                  </Timeline.Item>\r\n                  <Timeline.Item color={statusLevel >= 3 ? \"green\" : \"gray\"}>\r\n                    Payment Completed\r\n                  </Timeline.Item>\r\n                  <Timeline.Item color={statusLevel >= 4 ? \"green\" : \"gray\"}>\r\n                    Sent For Attestation\r\n                  </Timeline.Item>\r\n                  <Timeline.Item color={statusLevel >= 5 ? \"green\" : \"gray\"}>\r\n                    Attested Documents Uploaded\r\n                  </Timeline.Item>\r\n                  <Timeline.Item color={statusLevel >= 6 ? \"green\" : \"gray\"}>\r\n                    Documents Downloaded\r\n                  </Timeline.Item>\r\n                  <Timeline.Item color={statusLevel >= 7 ? \"green\" : \"gray\"}>\r\n                    Order Closed\r\n                  </Timeline.Item>\r\n                </Timeline>\r\n              </Col>\r\n              <Col xs={24} sm={24} md={24} lg={8}>\r\n                <Title level={4} className={\"mb-4\"}>\r\n                  Your Form\r\n                </Title>\r\n                <Upload {...uploadPropsForm} fileList={fileListForm}></Upload>\r\n                <Title level={4} className={\"mb-4 mt-4\"}>\r\n                  Your Documents\r\n                </Title>\r\n                <Upload {...uploadPropsDocs} fileList={fileListDocs}></Upload>\r\n              </Col>\r\n              <Col xs={24} sm={24} md={24} lg={8}>\r\n                <Title level={4} className={\"mb-4\"}>\r\n                  Attested Documents\r\n                </Title>\r\n                <Upload {...AdminDocsProps} fileList={fileListAdminDocs}>\r\n                  <Button>\r\n                    <UploadOutlined /> Upload\r\n                  </Button>\r\n                </Upload>\r\n              </Col>\r\n            </Row>\r\n\r\n            <div className={\"mb-4\"}>\r\n              <Text type=\"secondary\">Other details submitted by user.</Text>\r\n            </div>\r\n            <TextArea\r\n              style={{ cursor: \"default\" }}\r\n              readOnly\r\n              rows={4}\r\n              value={details}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={24} lg={8}>\r\n          <Card title=\"Chat with us\">\r\n            <div className=\"chat\">\r\n              <div className=\"chat-content\">\r\n                <div className=\"chat-content\">\r\n                  {chatContentBody(state.messages, 1)}\r\n                  {chatContentFooter()}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DocumentSingle;\r\n"],"sourceRoot":""}